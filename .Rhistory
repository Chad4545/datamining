##### diabetes samples
library(lars); data(diabetes); names(diabetes)
##### diabetes samples
install.packages("lars")
library(lars); data(diabetes); names(diabetes)
data(diabetes);
names(diabetes)
diab.df <- as.data.frame(cbind(diabetes$y,diabetes$x))
diab.df
View(diabetes)
names(diabetes)
View(diabetes)
View(diab.df)
colnames(diab.df) <- c("diab",colnames(diabetes$x))
# 데이터 프레임에 넣는순간 설명변수가 10개로 증가... ?
diab.df
names(diab.df)
diabetes$x
##### least square estimation
diab.mod <- lm(diab~.,data=diab.df)
##### analysis of variance and other statistical results
summary(diab.mod)
##### final fitted model
diab.mod$coef
x.vec <- sample(x=c("A","B","O","AB"),size=15,replace=TRUE)
x.vec
?sample
ux.vec <- unique(x.vec)
ux.vec
x.vec <- sample(x=c("A","B","O","AB"),size=15,replace=TRUE)
ux.vec <- unique(x.vec)
ux.vec
ux.vec <- ux.vec[-1] # the base line
ux.vec
z.mat <- t(t(matrix(rep(x.vec,length(ux.vec)),ncol=length(ux.vec)))==ux.vec)*1
colnames(z.mat) <- ux.vec
View(z.mat)
cbind(z.mat,x.vec) #checking the result
chad.vec <-sample(x=('male','female','gay'),size=20,replace=TRUE)
chad.vec
chad.vec <-sample(x=("male","female","gay"),size=20,replace=TRUE)
chad.vec <-sample(x=("male","female","gay"),size=20,replace=TRUE)
chad.vec <-sample(x=c("male","female","gay"),size=20,replace=TRUE)
chad.vec
uchad.vec
uchad.vec = unique(chad.vec)
uchad.vec
uchad.vec[1]
uchad.vec[-1]
uchad.vec[-2]
uchad.vec[-3]
uchad.vec[-4]
uchad.vec = uchad.vec[-1] # 첫번째 원소 빼고 다
uchad.vec
?rep
length(uchad.vec)
rep(chad.vec,length(uchad.vec))
matrix(rep(chad.vec,length(uchad.vec)),ncol= length(uchad.vec))
chad.vec
chad.vec <-sample(x=c("male","female","gay"),size=5,replace=TRUE)
chad.vec
uchad.vec = unique(chad.vec)
uchad.vec = uchad.vec[-1] # 첫번째 원소 빼고 다  == base line
uchad.vec
chad.vec <-sample(x=c("male","female","gay"),size=5,replace=TRUE)
chad.vec
chad.vec <-sample(x=c("male","female","gay"),size=5,replace=TRUE)
chad.vec
uchad.vec = unique(chad.vec)
uchad.vec = uchad.vec[-1] # 첫번째 원소 빼고 다  == base line
uchad.vec
chad.vec
rep(chad.vec,length(uchad.vec))# 원본데이터를 2번 써주고
matrix(rep(chad.vec,length(uchad.vec)),ncol= length(uchad.vec))
t(double_data)==uchad.vec
# 원본데이터를 각각 하나의 col 로 만들어서 매트릭스틑 만들고
double_data = matrix(rep(chad.vec,length(uchad.vec)),ncol= length(uchad.vec))
t(double_data)==uchad.vec
t(t(double_data)==uchad.vec)*1
(double_data==uchad.vec)*1
uchad_vec
uchad.vec
double_data
t(double_data)
t(t(double_data))
double_data==uchad.vec
t(double_data)==uchad.vec
uchad.vec
t(double_data)==uchad.vec
#uchad.vec == male, female
double_data
t(double_data)
t(double_data)==uchad.vec
#uchad.vec == male, female
double_data
double_data==uchad.vec
t(double_data)
t(double_data)==uchad.vec
t(t(double_data)==uchad.vec)*1
result = t(t(double_data)==uchad.vec)*1
colnames(result) <- uchad.vec
result
cbind(uchad.vec,x.vec)
cbind(result,chad.vec)
x = rep(x=c('A','B','C','D'),size=15,replace=TRUE)
x
x = sample((x=c('A','B','C','D'),size=15,replace=TRUE))
x = sample(x=c('A','B','C','D'),size=15,replace=TRUE)
x
ux.vec = unique(x)
ux.vec
ux.vec <- ux.vec[-1] # base line
result =t(t(matrix(rep(x,length(ux.vec)),ncol=length(ux.vec)))==ux.vec)*1
reult
result
colnames(result)=ux.vec
cbind(result,x)
x = sample(x=c('Vision','NLP','ML'),size=10,replace = TRUE)
x
ux = unique(x)
ux=ux[-1] , #baseline
ux=ux[-1]  #baseline
ux = unique(x)
ux=ux[-1]  #baseline
result = matrix(rep(x,length(ux)),ncol = length(ux))
result
result = t(t(matrix(rep(x,length(ux)),ncol = length(ux)))==ux)*1
cbind(result,x)
colnames(result)=ux
cbind(result,x)
library(lars)
library(lars)
data(diabetes)
diab.df <- as.data.frame(cbind(diabetes$y,diabetes$x2))
colnames(diab.df) <- c("diab",colnames(diabetes$x2))
colnames(diab.df)
diab.df[1:5,]
lm(diab~.,data=diab.df)$coef
##### least square estimator
x.mat <- cbind(1,as.matrix(diabetes$x)); y.vec <- as.vector(diabetes$y)
drop(solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.vec)
diab.df <- as.data.frame(cbind(diabetes$y,diabetes$x)); colnames(diab.df)[1] <- "diab"
lm(diab~.,data=diab.df)$coef
##### least square estimator
x.mat <- cbind(1,as.matrix(diabetes$x)); y.vec <- as.vector(diabetes$y)
x.mat
?solve
# (x.t x)(x.t)y
solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.vec)
# (x.t x)(x.t)y
solve(t(x.mat)%*%x.mat)
# (x.t x)(x.t)y
solve(t(x.mat)%*%x.mat)%*%t(x.mat)
# (x.t x)(x.t)y
solve(t(x.mat)%*%x.mat)%*%t(x.mat)
# (x.t x)(x.t)y
solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.vec
drop(solve(t(x.mat)%*%x.mat)%*%t(x.mat)%*%y.vec)
?drop
diab.df <- as.data.frame(cbind(diabetes$y,diabetes$x)); colnames(diab.df)[1] <- "diab"
lm(diab~.,data=diab.df)$coef
A = matrix(rep(1,9), nrow = 3, ncol = 3)
A
det(A)
A = matrix(sample(x=c(1,2,3),size=9,replace = TRUE), nrow = 3, ncol = 3)
det(A)
solve(A)
A
solve(A)
A%*%solve(A)
