names(rq.fit)
rq.summ = summary(rq.fit)
names(rq.summ)
A
#names(rq.fit)
#rq.summ = summary(rq.fit)
#names(rq.summ)
## R^2, adjR^2가 없다!  SST의 분해는 제곱로스일 때만 가능하다
rst.mat[,2]=c(NA,NA,AIC(rq.fit),
mean((nxy.df[,1]-predict(rq.fit,newdata=nxy.df))^2))
rst.mat
# 2. huber loss
library(robustreg)
rb.fit=robustRegH(sensitivity~.,data=xy.df)
names(rb.fit) # [1] "coefficients" "weights"      "mse"
rb.fit$mse
rb.summ=summary(rb.fit)
names(rb.summ)
#names(rb.fit) # [1] "coefficients" "weights"      "mse"
#rb.summ=summary(rb.fit)
#names(rb.summ)
# 후버에 대해서 숙제
## R^2, adjR^2가 없다!  SST의 분해는 제곱로스일 때만 가능하다
rst.mat[,3]=c(NA,NA,AIC(rb.fit),
mean((nxy.df[,1]-predict(rb.fit,newdata=nxy.df))^2))
#names(rb.fit) # [1] "coefficients" "weights"      "mse"
#rb.summ=summary(rb.fit)
#names(rb.summ)
# 후버에 대해서 숙제
## R^2, adjR^2가 없다!  SST의 분해는 제곱로스일 때만 가능하다
rst.mat[,3]=c(NA,NA,AIC(rb.fit),
mean((nxy.df[,1]-predict(rb.fit,newdata=nxy.df))^2))
AIC(rb.fit)
predict(rb.fit,newdata=nxy.df)
?robustRegH
predict(rb.fit,newdata=nxy.df)
test =rlm(sensitivity~.,data=xy.df)
?rlm
require(foreign)
require(MASS)
test =rlm(sensitivity~.,data=xy.df)
summary(test)
rb.fit=robustRegH(sensitivity~.,data=xy.df)
#names(rb.fit) # [1] "coefficients" "weights"      "mse"
#rb.summ=summary(rb.fit)
#names(rb.summ)
# 후버에 대해서 숙제
## R^2, adjR^2가 없다!  SST의 분해는 제곱로스일 때만 가능하다
rst.mat[,3]=c(NA,NA,AIC(rb.fit),
mean((nxy.df[,1]-predict(rb.fit,newdata=nxy.df))^2))
test
rb.fit
summary(rb.fit)
test
summary(rb.fit)
rb.fit
test
summary(rb.fit)
names(rb.fit)
rb.fit$coefficients
test
names(test)
AIC(test)
?rlm
fitH <- rlm(sensitivity~.,data=xy.df, k2 = 1.345)
fitH$coefficients
summary(test)
rb.fit=robustRegH(sensitivity~.,data=xy.df)
rb.fit
rb.fit$coefficients
fitH$coefficients
rb.fit <- rlm(sensitivity~.,data=xy.df, k2 = 1.345)
rst.mat[,3]=c(NA,NA,AIC(rb.fit),
mean((nxy.df[,1]-predict(rb.fit,newdata=nxy.df))^2))
rst.mat
# data
xy.df = read.csv(file='old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='old.sam.for.reg.pred.csv')
# 변수를 늘려보자
n = dim(xy.df)[1];n # 샘플갯수
# 1234,10
e.mat=matrix(rnorm(n*20),ncol = 20) # n*20개의 데이터, 변수는 20개
xxy.df = cbind(xy.df,e.mat) # 변수 추가
colnames(xxy.df)
lm.fit = lm(formula=sensitivity~.,data=xxy.df)
summary(lm.fit)$r.squared
rst.mat
lm.fit
names(lm.fit)
summary(lm.fit$rs
names(summart(lm.fit)))
names(summart(lm.fit))
names(summary(lm.fit))
summary(lm.fit)$r.squared
rst.mat
getwd()
setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='old.sam.for.reg.pred.csv')
# result matrix
rst.mat = matrix(NA,4,3)
colnames(rst.mat)=c("sq","abs","hub")
rownames(rst.mat) =c("R^2","Ra^2",'AIC',"pred_error")
'''
1. data의 변수를 모두 다 사용
2. 기본 linear 모델, abs loss 모델, huber loss 모델 모두 사용
3. R^2, adj R^2, AIC, pred_error 의 평가지표 모두 사용
'''
colnames(xy.df)
#1 linear - square loss
lm.fit = lm(formula=sensitivity~.,data=xy.df)
#names(lm.fit)
#lm.summ = summary(lm.fit)
#names(lm.summ)
rst.mat[,1]=c(summary(lm.fit)$r.squared,
summary(lm.fit)$adj.r.squared,
AIC(lm.fit),
mean((nxy.df[,1]-predict(lm.fit,newdata=nxy.df))^2)) # y_hat
# abs loss
library(quantreg)
rq.fit = rq(formula=sensitivity~.,data=xy.df)
#names(rq.fit)
#rq.summ = summary(rq.fit)
#names(rq.summ)
## R^2, adjR^2가 없다!  SST의 분해는 제곱로스일 때만 가능하다
rst.mat[,2]=c(NA,NA,AIC(rq.fit),
mean((nxy.df[,1]-predict(rq.fit,newdata=nxy.df))^2))
rst.mat
# 3. huber loss
library(robustreg)
require(MASS)
rb.fit <- rlm(sensitivity~.,data=xy.df, k2 = 1.345)
rst.mat[,3]=c(NA,NA,AIC(rb.fit),
mean((nxy.df[,1]-predict(rb.fit,newdata=nxy.df))^2))
rst.mat
rst.mat
View(rst.mat)
getwd()
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
getwd()
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
###
colnames(xy.df)
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))
r.sq.1
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))$r.sq
r.sq.1
r.sq.2 = summary(lm(formula = sensitivity~.,data=xy.df[,1:3]))$r.sq
r.sq.2
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))$r.sq
r.sq.2 = summary(lm(formula = sensitivity~.,data=xy.df[,1:3]))$r.sq
r.sq.3 = summary(lm(formula = sensitivity~.,data=xy.df[,1:4]))$r.sq
#
rs.mat = matrix(NA,2,20)
rownames(rs.mat)=c("R^2","adjR^2")
rs.mat
names(summary(lm(formula = sensitivity~.,data=xy.df[,1:2])))
for(i in 2:20){
rs.mat[1,i] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
rs.mat
View(rs.mat)
#
rs.mat = matrix(NA,2,20)
rownames(rs.mat)=c("R^2","adjR^2")
#
rs.mat = matrix(NA,2,19)
rownames(rs.mat)=c("R^2","adjR^2")
rs.mat
for(i in 2:19){
rs.mat[1,i] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
View(rs.mat)
###
colnames(xy.df)
#
rs.mat = matrix(NA,2,20)
rownames(rs.mat)=c("R^2","adjR^2")
rs.mat
for(i in 2:21){
rs.mat[1,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
rs.mat
# 그림
?matplot
R2 <- hist(subset(rs.mat[1,:]), breaks=20)
R2 <- hist(subset(rs.mat[1,]), breaks=20)
R2 <- hist(rs.mat[1,], breaks=20)
?hist
R2 <- hist(rs.mat[1,].T, breaks=20)
R2 <- hist(T(rs.mat[1,]), breaks=20)
matplot(rs.mat[1,],rs.mat[2,],type="h",
ylab = expression("AIC"),
xlab = expression("Tau"))
?matplot
?seq
matplot(seq(1,20),rs.mat[1,],type="h",
ylab = expression("Rsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Rsquare")
?matplot
matplot(seq(1,20),rs.mat[2,],type="h",
ylab = expression("adjRsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Adj Rsquare")
matplot(seq(1,20),rs.mat[1,],type="h",
ylab = expression("Rsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Rsquare")
matplot(seq(1,20),rs.mat[2,],type="h",
ylab = expression("adjRsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Adj Rsquare")
View(rs.mat)
?matplot
matplot(seq(1,20),rs.mat[1,],type="l",
ylab = expression("Rsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Rsquare")
matplot(seq(1,20),rs.mat[2,],type="h",
ylab = expression("adjRsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Adj Rsquare")
matplot(seq(1,20),rs.mat[2,],type="l",
ylab = expression("adjRsquare"),
xlab = expression("number of Explanatory variables"))
title(main = "Adj Rsquare")
?matplot
library(reshape2)
data <- cbind(seq = as.integer(rownames(iris)),  iris)
data
cols <- topo.colors(2, alpha = 0.5)
names(cols) <- names(data)['R_square',"Adj_R_square"]
4
4
cols <- topo.colors(4, alpha = 0.5)
names(cols) <- names(data)[2:5]
data
names(cols) <-['R_square',"Adj_R_square"]
names(cols) c('R_square',"Adj_R_square")
cols <- topo.colors(2, alpha = 0.5)
names(cols)= c('R_square',"Adj_R_square")
library(reshape2)
?melt
melt_data <- melt(rs.mat)
View(melt_data)
#
rs.mat = matrix(NA,3,20)
rownames(rs.mat)=c("# of variables","R^2","adjR^2")
rs.mat
for(i in 2:21){
rs.mat[1,i-1] = i - 1
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[3,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
cols <- topo.colors(2, alpha = 0.5)
names(cols)= c('R_square',"Adj_R_square")
library(reshape2)
?melt
View(melt_data)
View(rs.mat)
for(i in 2:21){
rs.mat[1,i-1] = i - 1
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[3,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
cols <- topo.colors(2, alpha = 0.5)
names(cols)= c('R_square',"Adj_R_square")
melt_data <- melt(rs.mat)
library(ggplot2)
eq
g <- ggplot(melt_data) + geom_line(aes(x = seq, y = value, colour = variable), cex = 0.8, show.legend = T)
g
g <- ggplot(melt_data)
g
View(g)
data = as.data.frame(rs.mat)
View(data)
t(rs.mat)
data = as.data.frame(t(rs.mat))
View(data)
cols <- topo.colors(2, alpha = 0.5)
names(cols)= c('R_square',"Adj_R_square")
melt_data <- melt(data,id.vars=c("seq"))
View(data)
melt_data <- melt(data,id.vars=c("# of variable"))
melt_data <- melt(data,id.vars=c("# of variables"))
g <- ggplot(melt_data) + geom_line(aes(x = seq, y = value, colour = variable), cex = 0.8, show.legend = T)
g
names(melt_data)
g <- ggplot(melt_data)
g
data <- cbind(seq = as.integer(rownames(iris)),  iris)
View(data)
cols <- topo.colors(4, alpha = 0.5)
names(cols) <- names(data)[2:5]
cols
ibrary(reshape2)
library(reshape2)
melt_data <- melt(data, id.vars = c("seq", "Species"))
View(melt_data)
g <- ggplot(melt_data) + geom_line(aes(x = seq, y = value, colour = variable), cex = 0.8, show.legend = T)
g
getwd()
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
###
colnames(xy.df)
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))$r.sq
r.sq.2 = summary(lm(formula = sensitivity~.,data=xy.df[,1:3]))$r.sq
r.sq.3 = summary(lm(formula = sensitivity~.,data=xy.df[,1:4]))$r.sq
#
rs.mat = matrix(NA,3,20)
rownames(rs.mat)=c("# of variables","R^2","adjR^2")
for(i in 2:21){
rs.mat[1,i-1] = i - 1
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[3,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
data = as.data.frame(t(rs.mat))
library(ggplot2)
df.m <- melt(data)
View(df.m)
#
rs.mat = matrix(NA,2,20)
rownames(rs.mat)=c("# of variables","R^2","adjR^2")
for(i in 2:21){
rs.mat[1,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
View(rs.mat)
rownames(rs.mat)=c("R^2","adjR^2")
View(rs.mat)
for(i in 2:21){
rs.mat[1,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
data = as.data.frame(t(rs.mat))
df.m <- melt(data)
View(df.m)
View(df.m)
ggplot(df.m) + geom_freqpoly(aes(x = value, y = ..density.., colour = variable))
View(data)
View(df.m)
ggplot(df.m) + geom_freqpoly(aes(x = c(1,20), y = ..density.., colour = variable))
getwd()
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
###
colnames(xy.df)
getwd()
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
###
colnames(xy.df)
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))$r.sq
r.sq.2 = summary(lm(formula = sensitivity~.,data=xy.df[,1:3]))$r.sq
r.sq.3 = summary(lm(formula = sensitivity~.,data=xy.df[,1:4]))$r.sq
#
rs.mat = matrix(NA,2,20)
rownames(rs.mat)=c("R^2","adjR^2")
for(i in 2:21){
rs.mat[1,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
rs.mat
t(rs.mat)
?plot()
op <- par(mfrow = c(2,1))
plot(Ozone ~ Wind, data = airquality, pch = as.character(Month))
plot(Ozone ~ Wind, data = airquality, pch = as.character(Month),
subset = Month != 7)
par(op)
df=as.data.frame(t(rs.mat))
View(df)
plot(c(1,20),df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.57),pch=4,type="o",col="#228B22")
#
rs.mat = matrix(NA,3,20)
rownames(rs.mat)=c("numbers","R^2","adjR^2")
for(i in 2:21){
rs.mat[1,i-1] = i-1
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[3,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
df=as.data.frame(t(rs.mat))
View(df)
plot(df$numbers,df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.57),pch=4,type="o",col="#228B22")
par(new=T)
plot(df$numbers,df$`adjR^2`,ylab="",xlab="",ylim=c(0,0.57),pch=0,type="o",col="#FF3030")
plot(df$numbers,df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.2),pch=4,type="o",col="#228B22")
par(new=T)
plot(df$numbers,df$`adjR^2`,ylab="",xlab="",ylim=c(0,0.2),pch=0,type="o",col="#FF3030")
par(new=T)
legend(x=16,y=0.57, c("total encryption","generation M","encypt data"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030","#228B22"))
legend(x=16,y=0.57, c("total encryption","generation M","encypt data"), cex=0.7, pch=c(2,0,4),col=c("#009ACD","#FF3030"))
title(main = "Tau in L1 & AIC")
title(main = "R square VS Adj R square")
plot(df$numbers,df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.2),pch=4,type="o",col="#228B22")
par(new=T)
plot(df$numbers,df$`adjR^2`,ylab="",xlab="",ylim=c(0,0.2),pch=0,type="o",col="#FF3030")
par(new=T)
title(main = "R square VS Adj R square")
legend(x=16,y=0.15, c("Rsquare","Adj_Rsquare"), cex=0.7, pch=c(2,0,4),col=c("#228B22","#FF3030"))
legend(x=16,y=0.20, c("Rsquare","Adj_Rsquare"), cex=0.7, pch=c(2,0,4),col=c("#228B22","#FF3030"))
plot(df$numbers,df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.2),pch=4,type="o",col="#228B22")
par(new=T)
plot(df$numbers,df$`adjR^2`,ylab="",xlab="",ylim=c(0,0.2),pch=0,type="o",col="#FF3030")
par(new=T)
legend(x=16,y=0.20, c("Rsquare","Adj_Rsquare"), cex=0.7, pch=c(2,0,4),col=c("#228B22","#FF3030"))
title(main = "R square VS Adj R square")
getwd()
#setwd("/Users/sungjinpark/Desktop/OneDrive - konkuk.ac.kr/datamining/homework/4")
# data
xy.df = read.csv(file='../4/old.sam.for.reg.fit.csv')
nxy.df = read.csv(file='../4/old.sam.for.reg.pred.csv')
###
colnames(xy.df)
# example 1 variable vs 2 variables vs 3variables
r.sq.1 = summary(lm(formula = sensitivity~.,data=xy.df[,1:2]))$r.sq
r.sq.2 = summary(lm(formula = sensitivity~.,data=xy.df[,1:3]))$r.sq
r.sq.3 = summary(lm(formula = sensitivity~.,data=xy.df[,1:4]))$r.sq
#
rs.mat = matrix(NA,3,20)
rownames(rs.mat)=c("numbers","R^2","adjR^2")
for(i in 2:21){
rs.mat[1,i-1] = i-1
rs.mat[2,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$r.sq
rs.mat[3,i-1] = summary(lm(formula = sensitivity~.,data=xy.df[,1:i]))$adj.r.sq
}
df=as.data.frame(t(rs.mat))
plot(df$numbers,df$`R^2`,ylab="",xlab="the number of variables",ylim=c(0,0.2),pch=4,type="o",col="#228B22")
par(new=T)
plot(df$numbers,df$`adjR^2`,ylab="",xlab="",ylim=c(0,0.2),pch=0,type="o",col="#FF3030")
par(new=T)
legend(x=16,y=0.20, c("Rsquare","Adj_Rsquare"), cex=0.7, pch=c(2,0,4),col=c("#228B22","#FF3030"))
title(main = "R square VS Adj R square")
View(df)
getwd()
getwd()
##### variation with respect to the sample size n others being fixed
rm(list=ls()); library(MASS)
### other constants
s.num <- 300 # number of simulations
p.num <- 10 # number of input variables
r.val <- 0.2 # correlation factor
a.val <- 0.05 # significance level
### parameters for sample generation
sig.mat <- r.val^(abs(outer(1:p.num,1:p.num,FUN="-"))) # variance of input vector
mu.vec <- rep(0,p.num) # mean of input vector
b.vec <- 1/(1:p.num) # true regression coefficient vector
s.val <- 2 # error variance
### simulations w.r.t sample size
n.vec <- (5:25)*100; n.num <- length(n.vec)
rst.mat <- matrix(0,n.num,p.num+1)
for(n.pos in 1:n.num){
for(s.pos in 1:s.num){
for(n.pos in 1:n.num){
in.rst.mat <- matrix(0,s.num,p.num+1)
for(s.pos in 1:s.num){
x.mat <- mvrnorm(n.vec[n.pos],mu.vec,sig.mat)
y.vec <- as.vector(x.mat%*%b.vec)+rnorm(n.vec[n.pos],0,s.val)
xy.df <- as.data.frame(cbind(y.vec,x.mat))
mod <- as.formula(paste(colnames(xy.df)[1],"~.",sep=""))
in.rst.mat[s.pos,] <- coef(summary(lm(mod,data=xy.df)))[,4] < a.val
}}
print(n.pos)}
for(n.pos in 1:n.num){
in.rst.mat <- matrix(0,s.num,p.num+1)
for(s.pos in 1:s.num){
x.mat <- mvrnorm(n.vec[n.pos],mu.vec,sig.mat)
y.vec <- as.vector(x.mat%*%b.vec)+rnorm(n.vec[n.pos],0,s.val)
xy.df <- as.data.frame(cbind(y.vec,x.mat))
mod <- as.formula(paste(colnames(xy.df)[1],"~.",sep=""))
in.rst.mat[s.pos,] <- coef(summary(lm(mod,data=xy.df)))[,4] < a.val
}
rst.mat[n.pos,] <- colMeans(in.rst.mat)
print(n.pos)}
### plotting
plot(1:n.num,rst.mat[,1],xlim=c(0,n.num+7),ylim=c(0,1.1),type="n")
for(p.pos in 1:(p.num+1)){
lines(1:n.num,rst.mat[,p.pos],col=p.pos,lty=2)
points(1:n.num,rst.mat[,p.pos],col=p.pos,pch=p.pos)
}
leg.vec <- c("int",colnames(xy.df)[-1])
legend("right",legend=leg.vec,pch=1:(p.num+1),col=1:(p.num+1),lty=2)
p = 10 # 계수의 수
n = 10000 # 샘플의 수
b.vec = 1/(1:p)
x.mat =matrix(rnorm(n*p),ncol=p)
